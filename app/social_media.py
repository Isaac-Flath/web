"""Help me with social media"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/social_media.ipynb.

# %% auto 0
__all__ = ['ar', 'idx', 'emojis', 'FooterIcon', 'rm_post', 'PostControls', 'mv_post_down', 'mv_post_up', 'autosize_textarea',
           'PostTextArea', 'EmojiButton', 'EmojiPicker', 'insert_emoji', 'UploadZone', 'upload_image',
           'save_post_content', 'save_post_image', 'rm_image', 'TwitterPost', 'rm_thread', 'load_thread', 'mk_thread',
           'mk_thread_list', 'index', 'share_thread', 'download_thread']

# %% ../nbs/social_media.ipynb
from fasthtml.common import *
from monsterui.all import *
from random import randint
from fastlite.core import *
from base64 import b64encode
from fractionalindex.fractionalindex import SqliteIndex
from utils import *
from zipfile import ZipFile
from io import BytesIO
import shutil

# %% ../nbs/social_media.ipynb
ar = APIRouter(prefix='/social_media', body_wrap=layout)

# %% ../nbs/social_media.ipynb
# This is from Alexis' fractional indexing which will help us manipulate ordering of cells
idx = SqliteIndex(db.conn,'posts', col='position')

# %% ../nbs/social_media.ipynb
def FooterIcon(icon, value=None):
    "Icons that look like twitter UI but do absolutely nothing"
    return Button(UkIcon(icon), Span(value) if value else None, cls=ButtonT.ghost) 

# %% ../nbs/social_media.ipynb
@ar.delete
def rm_post(pid:str, tid:str):
    post_tbl.delete(pid)

# %% ../nbs/social_media.ipynb
def PostControls(pid, tid):
    "Buttons that allow users to make actions, such as add/remove images, or reorder posts"
    return DivFullySpaced(
        Div(Button(UkIcon('trash-2'), hx_delete=rm_post.to(pid=pid,tid=tid), 
                   hx_target=f'#post-{pid}', hx_swap='delete')),
        Div(Button(UkIcon('smile-plus'), uk_toggle=f'#emoji_picker-{pid}'),
            Div(EmojiPicker(pid, tid), id=f'emoji_picker-{pid}', hidden=True, cls='absolute w-[400px]')),
        Div(Button(UkIcon('file-plus-2'), "image", uk_toggle=f'#upload-modal-{pid}'),
            Div(UploadZone(pid,tid), id=f'upload_zone-{pid}', hidden=True, cls='absolute')),
        Button(UkIcon('trash-2'),"Image", hx_delete='rm_image', hx_target=f'#img-{pid}', hx_swap='innerHTML', hx_vals={'pid':pid}),
        Button(UkIcon('plus'),     hx_get=TwitterPost.to(tid=tid),   hx_target=f'#post-list', hx_swap='beforeend'), 
        Button(UkIcon("move-up"),   hx_trigger='click', hx_target='#post-list', hx_get=mv_post_up.to(pid=pid,tid=tid)),
        Button(UkIcon("move-down"), hx_trigger='click', hx_target='#post-list', hx_get=mv_post_down.to(pid=pid, tid=tid)))

# %% ../nbs/social_media.ipynb
@ar
def mv_post_down(pid:str, tid:str, sess): 
    "Use Fractional Indexing to move post down in the thread"
    curr_pos = db.fetchone('select position from posts where id=?', (pid,))
    _position = db.fetchone('select min(position) as m from posts where position>? and tid=?', [curr_pos, tid])
    post_tbl.upsert(Post(id=pid, position=idx.insert(after=_position)))
    return load_thread(tid, sess['user_name'])
@ar
def mv_post_up(pid:str, tid:str, sess): 
    "Use Fractional Indexing to move post down in the thread"
    curr_pos = db.fetchone('select position from posts where id=?', (pid,))
    _position = db.fetchone('select max(position) as m from posts where position<? and tid=?', [curr_pos, tid])
    post_tbl.upsert(Post(id=pid, position=idx.insert(before=_position)))
    
    return load_thread(tid, sess['user_name'])

# %% ../nbs/social_media.ipynb
def autosize_textarea():
    return Script("""
    function autosize(el) {
        el.style.height = 'auto';
        el.style.height = el.scrollHeight + 'px';
    }
    document.addEventListener('htmx:afterSettle', function(evt) {
        evt.target.querySelectorAll('textarea').forEach(autosize);
    });
    document.querySelectorAll('textarea').forEach(autosize);
    """)

# %% ../nbs/social_media.ipynb
@ar
def PostTextArea(txt:str, pid:str, tid:str):
    "The actual text content is editable here, and includes a counter for how many chars it has."
    txt = txt if txt else ''
    return Div(
        TextArea(txt,
                name='content',
                id=f'content-{pid}',
                cls='w-full border-0 focus:outline-none resize-none bg-transparent',
                hx_post=save_post_content,
                hx_trigger='input',
                hx_vals={'pid':pid,'tid':tid},
                _='on load call autosize(me) on htmx:afterSettle call autosize(me)',
                oninput=f"""
                    var text = this.value;
                    var urlRegex = /(https?:\/\/[^\s]+)/g;
                    var urls = text.match(urlRegex) || [];
                    var urlChars = urls.reduce((acc, url) => acc + (url.length - 23), 0);
                    var count = text.length - urlChars;
                    var countEl = document.getElementById('char-count-{pid}');
                    var remaining = 280 - count;
                    countEl.textContent = remaining;
                    countEl.className = remaining < 0 ? 
                        'text-sm text-red-500 text-right mt-1' : 
                        remaining <= 20 ? 
                            'text-sm text-yellow-500 text-right mt-1' : 
                            'text-sm text-gray-500 text-right mt-1';
                    autosize(this);
                """),
        Div(f"{280-len(txt)}", 
            id=f"char-count-{pid}",
            cls=f"text-sm {'text-red-500' if len(txt)>280 else 'text-gray-500'} text-right mt-1"),
        id=f'content-container-{pid}'
    )

# %% ../nbs/social_media.ipynb
emojis = [
    "😀", "😃", "😄", "😁", "😅", "😂", "🤣", "😊", "😇", "🙂", "🙃", "😉", "😌", "😍", "🥰", 
    "😘", "😗", "😙", "😚", "😋", "😛", "😝", "😜", "🤪", "🤨", "🧐", "🤓", "😎", "🤩", "🥳",
    "😏", "😒", "😞", "😔", "😟", "😕", "🙁", "☹️", "😣", "😖", "😫", "😩", "🥺", "😢", "😭",
    "❤️", "🧡", "💛", "💚", "💙", "💜", "🖤", "🤍", "🤎", "💔", "❤️‍🔥", "❤️‍🩹", "❣️", "💕", "💞",
    "🌟", "⭐", "✨", "💫", "🌙", "☀️", "⚡", "🔥", "💥", "❄️", "🌈", "🌊", "🍀", "🌸", "🌺"
]

def EmojiButton(pid, tid, emoji):
    "A button that shows and emoji that when pressed will append the emoji to the end of the text area"
    return Button(emoji, cls=ButtonT.ghost, hx_post=insert_emoji,
        hx_vals=f'''js:{{pid: '{pid}', tid: '{tid}', emoji: '{emoji}', content: document.querySelector('#content-{pid}').value}}''',
        hx_target=f'#content-container-{pid}', hx_swap='outerHTML', uk_toggle=f'#emoji_picker-{pid}')

# %% ../nbs/social_media.ipynb
def EmojiPicker(pid, tid):
    "A grid of emoji buttons users can select from"
    return Card(
        Grid(*(EmojiButton(pid, tid, emoji) for emoji in emojis), cls='', cols=10),cls='w-fit z-50 uk-background-muted')

# %% ../nbs/social_media.ipynb
@ar 
def insert_emoji(pid:str, tid:str, emoji:str, content:str):
    "Appends an emoji to content and returns an updated PostTextArea"
    new_content = content + emoji
    save_post_content(pid, tid, new_content)
    return PostTextArea(new_content, pid, tid)

# %% ../nbs/social_media.ipynb
def UploadZone(pid, tid, icon="upload", text="Drag files here or click to upload"):
    """Creates a styled upload zone modal for users to drag/drop images into using MonsterUI modal"""
    return Modal(DivCentered(
            UkIcon(icon, cls=TextT.muted),
            P(text, cls=TextPresets.muted_lg),
            Input(type="file", name="image", 
                cls="opacity-0 absolute inset-0 w-full h-full cursor-pointer",
                hx_post=upload_image, 
                hx_encoding="multipart/form-data", 
                hx_trigger="change", 
                hx_vals={'pid':pid,'tid':tid},
                hx_target=f'#img-{pid}'),
        cls='space-y-10'),
              id=f'upload-modal-{pid}')

@ar
async def upload_image(pid:str, tid:str, image:UploadFile):
    "Save image to disk and insert image into db/UI"
    contents = await image.read()
    img_data = f"data:{image.content_type};base64,{b64encode(contents).decode()}"
    os.makedirs(f"uploads/{tid}/{pid}", exist_ok=True)
    filename = f"uploads/{tid}/{pid}/{image.filename}"
    Path(filename).write_bytes(contents)
    save_post_image(pid, tid, f"/{filename}")
    return Img(src=f"/{filename}", cls="rounded-lg max-w-[512px] mt-4"), UploadZone(pid, tid) 

# %% ../nbs/social_media.ipynb
@ar
def save_post_content(pid:str, tid:str, content:str): 
    if pid in post_tbl: post_tbl.upsert(Post(id=pid, tid=tid, content=content))
    else: post_tbl.insert(Post(id=pid, tid=tid, position=idx.insert()))
def save_post_image(pid:str, tid:str, img_path:str):  post_tbl.upsert(Post(id=pid, tid=tid, img_path=img_path))
    
@ar.delete
def rm_image(pid:str):post_tbl.upsert(Post(id=pid, img_path=None))

# %% ../nbs/social_media.ipynb
@ar
def TwitterPost(tid:str, pid=None, txt='', img=None, username="User", handle="@user", time="Just now"):
    "Creates the UI look for a Twitter Post"
    if not pid: pid = unqid()
    return Div(
        Card(
            DivLAligned(
                Span(username, cls=TextT.bold),
                *map(lambda x: Span(x,cls=TextPresets.muted_sm), (handle,time))),
            PostTextArea(txt,pid, tid),
            autosize_textarea(),
            Div(Img(src=img,cls='rounded-lg max-w-[512px]') if img else None, id=f'img-{pid}'),
            DivFullySpaced(
                *[FooterIcon(i,v) for i,v in (('chat','0'), ('repeat', randint(5, 100)), ('heart', randint(100, 900)))],
                UkIcon('share'),
                cls=TextT.muted),
            cls='shadow-none'),PostControls(pid,tid),
         id=f'post-{pid}',
    )

# %% ../nbs/social_media.ipynb
@ar
def TwitterPost(tid:str, pid=None, txt='', img=None, username="User", handle="@user", time="Just now"):
    "Creates the UI look for a Twitter Post"
    if not pid: pid = unqid()
    return Div(
        Card(
            DivLAligned(
                Span(username, cls=TextT.bold),
                *map(lambda x: Span(x,cls=TextPresets.muted_sm), (handle,time))),
            PostTextArea(txt,pid, tid),
            autosize_textarea(),
            Div(Img(src=img,cls='rounded-lg max-w-[512px]') if img else None, id=f'img-{pid}'),
            DivFullySpaced(
                *[FooterIcon(i,v) for i,v in (('chat','0'), ('repeat', randint(5, 100)), ('heart', randint(100, 900)))],
                UkIcon('share'),
                cls=TextT.muted),
            cls='shadow-none max-w-[598px]'),  # Twitter's standard post width
        PostControls(pid,tid),
        id=f'post-{pid}',
        cls='max-w-[598px]'  # Also constrain outer div to match
    )

# %% ../nbs/social_media.ipynb
@ar.delete
def rm_thread(tid:str, sess):
    "Deletes a thread and all it's posts"
    #TODO:  Delete the images from disk too
    user_name = db.fetchone('select user from threads where id=?', (tid,))
    assert sess['user_name'] == user_name
    thread_tbl.delete(tid)
    post_tbl.delete_where('tid=?', (tid,))
    return Div(id='post-list', cls='space-y-5'), mk_thread_list(sess['user_name'])

# %% ../nbs/social_media.ipynb
@ar
def load_thread(tid:str, user_name:str):
    "Loads a thread from DB with header with title/delete, a list of `TwitterPost`s, and the thread list selector"
    posts = list(post_tbl.rows_where('tid=?',(tid,), order_by='position'))
    thread_name = db.fetchone('select name from threads where id=?', (tid,))

    return Div(
        DivFullySpaced(
            H3(thread_name),
            DivRAligned(
                Button("Delete", cls=ButtonT.destructive, hx_delete=rm_thread, 
                       hx_target='#post-list', hx_swap='outerHTML', 
                       hx_vals={'tid':tid}, 
                       hx_confirm='Are you sure?  The thread and all posts will be deleted'),
                A("Download", href=download_thread.to(tid=tid), target='_blank', cls='uk-btn'+ButtonT.secondary),
                A("Share", href=share_thread.to(tid=tid), target='_blank', cls='uk-btn'+ButtonT.secondary),
            
            
            )),
            DivCentered(
                *(TwitterPost(
                tid=p['tid'], pid=p['id'], txt=p['content'], img=p['img_path'],
                username=p['username'], handle=p['handle'],time=p['created_at']) for p in posts), 
            id='post-list', cls='space-y-5 max-w-[598px]'), 
        mk_thread_list(user_name, tid))

# %% ../nbs/social_media.ipynb
@ar
def mk_thread(sess, thread_name:str):
    "Create a new twitter thread in db, load it into UI, then update the thread list in UI"
    pid, tid = unqid(), unqid()
    post_tbl.upsert(Post(id=pid, tid=tid, position=idx.insert()))
    thread_tbl.upsert(Thread(id=tid, name=thread_name, user=sess['user_name']))
    return Div(load_thread(tid, sess['user_name'])),mk_thread_list(sess['user_name'], tid)

# %% ../nbs/social_media.ipynb
def mk_thread_list(user_name, tid=None):
    "Creates UI for a list of all threads in the db for the given user"
    threads = list(thread_tbl.rows_where('user=?', (user_name,)))
    threadlist = [Li(A(thread['name']), hx_get=load_thread.to(tid=thread['id'], user_name=user_name), hx_target='#post-list', cls='uk-active' if tid==thread['id'] else '') for thread in threads]
    return NavContainer(id='thread-list', hx_swap_oob='true', cls=(NavT.primary,'h-full'))(*threadlist)

# %% ../nbs/social_media.ipynb
@ar
def index(sess):
    return Title("PostHaste"), Container(H3("Make your Twitter thread post haste!", cls='mb-10'),
        Grid(
            Div(Form(DivFullySpaced(
                    Input(id="thread_name", name='thread_name', placeholder='Thread Name'),
                    Button("Create", cls=ButtonT.primary),
            cls='mb-5 space-x-3'), 
                    hx_get=mk_thread, hx_target='#post-list', hx_swap='outerHTML'),
                Div(mk_thread_list(sess['user_name']), id='thread-list')),
            Div(id='post-list', cls='space-y-3 max-w-[598px]'),))

# %% ../nbs/social_media.ipynb
@ar
def share_thread(tid:str):
    "Show thread in Twitter-like format for sharing"
    posts = db.execute('''
        select p.content, p.img_path, p.username, p.handle, p.created_at, t.name
        from posts p
        left join threads t on p.tid=t.id
        where p.tid=? 
        order by position
    ''', [tid]).fetchall()
    
    return Container(
        H2(posts[0][5], cls='mb-5'),  # Thread name
        DivCentered(*(
            Card(
                DivLAligned(
                    Span(p[2] or "User", cls=TextT.bold),
                    *map(lambda x: Span(x,cls=TextPresets.muted_sm), (p[3] or "@user", p[4] or "Just now"))),
                P(p[0] or '', cls='my-3'),
                Div(Img(src=p[1], cls='rounded-lg max-w-[512px]') if p[1] else None),
                DivFullySpaced(
                    *[FooterIcon(i,v) for i,v in (('chat','0'), ('repeat', randint(5, 100)), ('heart', randint(100, 900)))],
                    UkIcon('share'),
                    cls=TextT.muted),
                cls='shadow-none')
            for p in posts
        ), cls='space-y-5 max-w-[598px]')
    )

# %% ../nbs/social_media.ipynb
@ar
def download_thread(tid:str):
    "Download thread content and images as zip"
    posts = db.execute('''
        select content, img_path
        from posts 
        where tid=? 
        order by position
    ''', [tid]).fetchall()
    
    # Create zip file in memory
    zip_buffer = BytesIO()
    with ZipFile(zip_buffer, 'w') as zf:
        # Add thread text
        thread_text = []
        for i,(txt,img) in enumerate(posts, 1):
            thread_text.append(f"## {i} / {len(posts)}\n")
            thread_text.append(txt or '')
            if img:
                thread_text.append(f"Image: {i}{Path(img).suffix}")
                # Copy image with new name
                img_path = Path(img.lstrip('/'))
                if img_path.exists():
                    zf.write(img_path, f"{i}{img_path.suffix}")
        
        # Add thread text file
        zf.writestr('thread.txt', '\n\n'.join(thread_text))
    
    # Return zip file
    zip_buffer.seek(0)
    return Response(
        content=zip_buffer.getvalue(),
        media_type='application/zip',
        headers={'Content-Disposition': f'attachment; filename="thread.zip"'}
    )
